import telebot
import json

from config import  TOKEN
from telebot import types

bot = telebot.TeleBot(TOKEN)


@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add(types.KeyboardButton('üìÑ –°–ø–∏—Å–æ–∫ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π'), types.KeyboardButton('üìé –ö–æ–º–∞–Ω–¥—ã'),
               types.KeyboardButton('üíæ –ù–∞—Å—Ç—Ä–æ–π–∫–∏'))

    bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç *{message.chat.username}* üëã\n'
                                      f'–í —ç—Ç–æ –±–æ—Ç–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –Ω–∞ —É–ø–æ–º–µ–Ω–∞–Ω–∏—è –≤ —á–∞—Ç–µ —Ç–≤–∏—á–∞\n\n'
                                      f'–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å/–¥–æ–ø–æ–ª–Ω–∏—Ç—å —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ '
                                      f'\n  `/create'
                                      f' <–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞> <—É–ø–æ–º–∏–Ω–∞–Ω–∏—è>`', reply_markup=markup,
                     parse_mode='Markdown')


@bot.message_handler(commands=['create', '—Å–æ–∑–¥–∞—Ç—å'])
def create(message):
    if len(message.text.split()) >= 2:

        channel = message.text.split()[1]

    else:

        channel = None

    if len(message.text.split()) > 2:

        ping = message.text.split()[2:]

    else:

        ping = []
    print(ping)

    with open('base.txt', 'r', encoding='utf-8') as base:
        users = eval(base.read())

    if len(message.text.split()) == 1:

        bot.send_message(message.chat.id, f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ —É–∫–∞–∂–∏—Ç–µ –∫–∞–Ω–∞–ª –∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ')

    elif str(message.chat.id) in users['user_id'].keys() and ping != []:

        users['all_channel'].append(channel)
        users['user_id'][str(message.chat.id)]['channels'].append(channel)

        for el in ping:
            users['all_pings'].append(el)

            if el not in users['user_id'][str(message.chat.id)]['ping']:
                users['user_id'][str(message.chat.id)]['ping'].append(el)

            if el not in users['ping'].keys():

                users['ping'][el] = [message.chat.id]

            else:

                users['ping'][el].append(message.chat.id)

        bot.send_message(message.chat.id, f'*–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã ‚úÖ*', parse_mode='Markdown')

    elif str(message.chat.id) not in users['user_id'].keys() and ping != []:

        users['user_id'][str(message.chat.id)] = {'ping': [x for x in ping], 'channels': [channel]}
        users['all_channel'].append(channel)

        for el in ping:
            if el not in users['all_pings']:
                users['all_pings'].append(el)

            if el not in users['ping'].keys():

                users['ping'][el] = [message.chat.id]

            else:

                users['ping'][el].append(message.chat.id)

        bot.send_message(message.chat.id, f'*–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã ‚úÖ*', parse_mode='Markdown')

    elif not ping:

        bot.send_message(message.chat.id, f'*‚ùå –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è*\n'
                                          f'–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª/—É–ø–æ–º–∏–Ω–∞–Ω–∏—è '
                                          f'–ø—Ä–æ–ø—Ä–∏—à–∏—Ç–µ `/add` –∏–ª–∏ `/add_ping`', parse_mode='Markdown')

    print(users)

    with open('base.txt', 'w', encoding='utf-8') as p:
        json.dump(users, p, ensure_ascii=False)


@bot.message_handler(commands=['add'])
def add_channels(message):
    if len(message.text.split()) >= 2:
        channels = message.text.split()[1:]
    else:
        channels = None

    with open('base.txt', encoding='utf-8') as d:
        users = json.load(d)

    if channels is not None and str(message.chat.id) in users['user_id'].keys():

        for el in channels:

            if el not in users['user_id'][str(message.chat.id)]['channels']:
                users['user_id'][str(message.chat.id)]['channels'].append(el)

            if el not in users['all_channel']:
                users['all_channel'].append(el)

        bot.send_message(message.chat.id, f'*–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã ‚úÖ*', parse_mode='Markdown')

    else:

        bot.send_message(message.chat.id, f'*–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞, –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –ø–æ—á–µ–º—É ü§î*\n'
                                          f'–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–∫–∞–∑–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫–∞–Ω–∞–ª', parse_mode='Markdown')

    with open('base.txt', 'w', encoding='utf-8') as p:
        json.dump(users, p, ensure_ascii=False)


@bot.message_handler(commands=['add_ping'])
def add_ping(message):
    with open('base.txt', encoding='utf-8') as d:
        users = json.load(d)

    if len(message.text.split()) >= 2:

        ping = message.text.split()[1:]

    else:

        ping = None

    if ping is not None and str(message.chat.id) in users['user_id'].keys():

        for el in ping:

            if el not in users['all_pings']:
                users['all_pings'].append(el)

            if el not in users['ping'].keys():

                users['ping'][el] = [message.chat.id]

            else:

                users['ping'][el].append(el)

            if el not in users['user_id'][str(message.chat.id)]['ping']:
                users['user_id'][str(message.chat.id)]['ping'].append(el)

        bot.send_message(message.chat.id, f'*–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã ‚úÖ*', parse_mode='Markdown')

    else:

        if ping is None:

            bot.send_message(message.chat.id, '–í—ã –Ω–µ –≤–≤–µ–ª–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã ü§®')

        elif message.chat.id not in users['user_id'].keys():

            bot.send_message(message.chat.id, '–£ –≤–∞—Å –Ω–µ —Å–æ–∑–¥–∞–Ω–æ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ.\n'
                                              '–ü—Ä–æ–ø–∏—à–∏—Ç–µ `/create` —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —É–ø–æ–º–∏–Ω–∞–Ω–∏—è', parse_mode='Markdown')

    with open('base.txt', 'w', encoding='utf-8') as p:
        json.dump(users, p, ensure_ascii=False)


@bot.message_handler(content_types='text')
def button(message):
    if message.text == 'üìÑ –°–ø–∏—Å–æ–∫ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π':

        with open('base.txt', encoding='utf-8') as d:
            base = json.load(d)
        print(base)

        if str(message.chat.id) in base['user_id'].keys():

            string = '*–í–∞—à–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è:*\n'

            for el in base['user_id'][str(message.chat.id)]['ping']:
                string += f' - `{el}`\n'

            string += f'\n*–ö–∞–Ω–∞–ª—ã —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —É–ø–æ–º–Ω–∏–∞–Ω–∏–π:*\n'

            for el in base['user_id'][str(message.chat.id)]['channels']:
                string += f' - `{el}`\n'

            bot.send_message(message.chat.id, string, parse_mode='Markdown')

    elif message.text == 'üìé –ö–æ–º–∞–Ω–¥—ã':

        bot.send_message(message.chat.id, f'*–í–æ—Ç –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã:*\n'
                                          f'`/create` - —Å–æ–∑–¥–∞—ë—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —É–∫–∞–∑–∞–Ω–æ–º –∫–∞–Ω–∞–ª–µ. –°–Ω–∞—á–∞–ª–∞ –∏–¥—ë—Ç –∫–∞–Ω–∞–ª, '
                                          f'–∞ –ø–æ—Ç–æ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è (–±–µ–∑ –∑–∞–ø—è—Ç—ã—Ö)\n'
                                          f'`/add` - –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–∞–Ω–∞–ª—ã –¥–ª—è —É–ø–æ–º–∏–Ω–∞–Ω–∏–π\n'
                                          f'`/add_ping` - –¥–æ–±–∞–≤–ª—è–µ—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏—è', parse_mode='Markdown')

    elif message.text == 'üíæ –ù–∞—Å—Ç—Ä–æ–π–∫–∏':
        with open('base.txt', encoding='utf-8') as d:
            users = json.load(d)

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)

        if message.chat.id not in users['ppl']:

            markup.add(types.KeyboardButton('–°–ø–µ—Ü —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ | OFF'), types.KeyboardButton(''),
                       types.KeyboardButton('‚¨ÖÔ∏è–í—ã—Ö–æ–¥'))

        else:

            markup.add(types.KeyboardButton('–°–ø–µ—Ü —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ | ON'), types.KeyboardButton(''),
                       types.KeyboardButton('‚¨ÖÔ∏è–í—ã—Ö–æ–¥'))

        bot.send_message(message.chat.id, f'–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ \n'
                                          f'–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ *–°–ø–µ—Ü —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è*\n\n'
                                          f'*–°–ø–µ—Ü —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ* - —ç—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è '
                                          f'–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–µ–¥–∑–∞–∫–∞–∑–∞ –Ω–∞ –ø–ø–ª üê∏', reply_markup=markup,
                         parse_mode='Markdown')

        with open('base.txt', 'w', encoding='utf-8') as p:
            json.dump(users, p, ensure_ascii=False)

    elif message.text == '‚¨ÖÔ∏è–í—ã—Ö–æ–¥':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        markup.add(types.KeyboardButton('üìÑ –°–ø–∏—Å–æ–∫ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π'), types.KeyboardButton('üìé –ö–æ–º–∞–Ω–¥—ã'),
                   types.KeyboardButton('üíæ –ù–∞—Å—Ç—Ä–æ–π–∫–∏'))

        bot.send_message(message.chat.id, f'–í—ã –≤–µ—Ä–Ω—É–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=markup)

    elif message.text == '–°–ø–µ—Ü —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ | OFF':

        with open('base.txt', encoding='utf-8') as d:
            users = json.load(d)

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        markup.add(types.KeyboardButton('–°–ø–µ—Ü —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ | ON'), types.KeyboardButton(''),
                   types.KeyboardButton('‚¨ÖÔ∏è–í—ã—Ö–æ–¥'))

        if message.chat.id not in users['ppl']:
            users['ppl'].append(message.chat.id)

        bot.send_message(message.chat.id, f'–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑–º–µ–Ω–µ–Ω—ã', reply_markup=markup)

        with open('base.txt', 'w', encoding='utf-8') as p:
            json.dump(users, p, ensure_ascii=False)

    elif message.text == '–°–ø–µ—Ü —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ | ON':

        with open('base.txt', encoding='utf-8') as d:
            users = json.load(d)

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        markup.add(types.KeyboardButton('–°–ø–µ—Ü —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ | OFF'), types.KeyboardButton(''),
                   types.KeyboardButton('‚¨ÖÔ∏è–í—ã—Ö–æ–¥'))

        if message.chat.id not in users['ppl']:
            users['ppl'].pop(message.chat.id)

        bot.send_message(message.chat.id, f'–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑–º–µ–Ω–µ–Ω—ã', reply_markup=markup)

        with open('base.txt', 'w', encoding='utf-8') as p:
            json.dump(users, p, ensure_ascii=False)


bot.infinity_polling()
